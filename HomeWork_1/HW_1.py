# -*- coding: utf-8 -*-
"""Copy of AI4021 - HW1 - 1 - Python Tutorial 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fIB4Z2kHsnYMH4TSGssdHyvPXVc9Bxnq

**Question 1:** Write a Python program that asks the user for their age. If the age is greater than or equal to 18, print "You are an adult." Otherwise, print "You are a minor."
"""

age = int(input(" Enter your age: "))
if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")

"""**Question 2:** Write a Python program to print the numbers from 1 to 10 using a for loop."""

for i in range(1, 11):
    print(i)

"""**Question 3:** Write a Python program to calculate the sum of all even numbers from 1 to 20 using a while loop."""

a = 1
s = 0
while a<=20 :
  if a % 2 == 0 :
    s+=a
  a+=1
print (s)

"""**Question 4:** Define a function called multiply that takes two parameters and returns their product."""

def mul():
  a = float(input("Enter first number"))
  b = float(input("Enter second number"))
  return a*b
mul()

"""**Question 5:** Create a class called Person with a constructor method that initializes the name and age attributes. Then, create an instance of the Person class and print the person's name and age."""

class Person:
  def __init__(self, name , age):
    self.name = name
    self.age = age

p1 = Person("iman", 6)

print(p1.name)
print(p1.age)

"""**Question 6:** Create a subclass called `Student` that inherits from the `Person` class. Add an additional attribute called `student_id` to the `Student` class. Create an instance of the `Student` class and print the student's name, age, and student ID."""

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id

student = Student("Iman", 21, "9980042")
print(student.name)
print(student.age)
print(student.student_id)

"""**Question 7:** Write a Python program that prompts the user to enter a number and then prints whether the number is prime or not. Create a function called `is_prime` that takes an integer as an argument and returns True if it's prime, and False otherwise."""

def is_prime():
  c=0
  num = int(input("enter a num"))
  for i in range(num+1):
    if num%(i+1) ==0:
      c+=1
  if c ==2 :
    return f"{num} is prime"

  else :
    return f"{num} is not prime"


is_prime()

"""**Question 8:** Write a Python program that calculates the factorial of a given number using a recursive function. Prompt the user for an integer input and print its factorial."""

num = int(input("enter a num"))
def factorial(num):

  if num == 0:
    return 1
  else:
    return num * factorial(num-1)

#num = int(input("enter a num"))
factorial(num)

"""**Question 9:** Create a class called `Rectangle` with attributes `width` and `height`. Add a method `calculate_area` that calculates and returns the area of the rectangle. Create an instance of the `Rectangle` class and print its area."""

class Rectangle:
  def __init__(self, width , height):
    self.width = width
    self.height = height

  def calculate_area(self):
    return self.width*self.height


rec = Rectangle(6,7)
rec.calculate_area()

"""**Question 10:** Create a subclass called `Square` that inherits from the `Rectangle` class. Add a method `calculate_perimeter` to the `Square` class that calculates and returns the perimeter of the square. Create an instance of the `Square` class and print its perimeter."""

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height


class Square(Rectangle):
    def __init__(self, side_length):

        super().__init__(side_length, side_length)

    def calculate_perimeter(self):
        return 4 * self.width


square = Square(50)


perimeter = square.calculate_perimeter()
print("The perimeter of the square is:", perimeter)

"""**Question 11:** Create a base class called `Animal` with attributes `name` and `species`. Provide a constructor to initialize these attributes and a method called `speak` that prints a generic message like "The animal makes a sound."
"""

class Animal:
    def __init__(self, name, species):
        self.name = name
        self.species = species

    def speak(self):
        print("The animal makes a sound.")

# Create an instance of the Animal class
animal = Animal("Alex", "cat")

# Call the speak method
animal.speak()

"""**Question 12:** Create a subclass called `Dog` that inherits from the `Animal` class. Add a constructor to initialize the `name`, `species`, and `breed` attributes specific to dogs. Override the `speak` method in the `Dog` class to print "Woof!"
"""

class Animal:
  def __init__(self , name , species , breed):
    self.name = name
    self.species = species
    self.breed = breed

class Dog(Animal):
  def __init__(self , name , species , breed):
    super().__init__(name , species , breed)
  def speak(self):
    print("woof")

dog = Dog("Alex" , "Labrador" ,"Retriever")
dog.speak()

"""**Question 13:** Create another subclass called `Cat` that inherits from the `Animal` class. Add a constructor to initialize the `name`, `species`, and `color` attributes specific to cats. Override the `speak` method in the `Cat` class to print "Meow!"
"""

class Animal:
  def __init__(self , name , species , breed):
    self.name = name
    self.species = species
    self.breed = breed

class Cat(Animal):
  def __init__(self , name , species , breed):
    super().__init__(name , species , breed)
  def speak(self):
    print("meow")

cat = Cat("Katy" , "British" ,"Shorthair")
cat.speak()

"""**Question 14:** Create instances of both the `Dog` and `Cat` classes and call their `speak` methods to demonstrate polymorphism."""

class Animal:
  def __init__(self , name , species , breed):
    self.name = name
    self.species = species
    self.breed = breed

class Dog(Animal):
  def __init__(self , name , species , breed):
    super().__init__(name , species , breed)
  def speak(self):
    print(f"{self.name} the {self.species} {self.breed} says woof")

class Cat(Animal):
  def __init__(self , name , species , breed):
    super().__init__(name , species , breed)
  def speak(self):
    print(f"{self.name} the {self.species} {self.breed} says meow")



dog = Dog("Alex" , "Labrador" ,"Retriever")
dog.speak()
cat = Cat("Katy" , "British" ,"Shorthair")
cat.speak()