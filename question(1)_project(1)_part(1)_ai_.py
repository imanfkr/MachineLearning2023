# -*- coding: utf-8 -*-
"""Question(1)_Project(1)_Part(1)_AI .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19QZlD_n4gbxVr7zEFUwHSj1Qy6DXB3e1
"""

# Part 1 - the first question :

from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
import numpy as np

# Generating synthetic dataset
X, y = make_classification(n_samples=1000, n_features=2, n_classes=2, n_clusters_per_class=1, n_redundant=0, random_state=83)

# Plotting the generated dataset
plt.scatter(X[:, 0], X[:, 1] ,c=y)
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Synthetic Dataset with 2 Classes and 2 Features')
plt.show()

#  Part 2 - the first question :

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Generating synthetic dataset
X, y = make_classification(n_samples=1000, n_features=2, n_classes=2, n_clusters_per_class=1, n_redundant=0, random_state=83)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=83)

# Logistic Regression
logreg_model = LogisticRegression(random_state=83)
logreg_model.fit(X_train, y_train)
logreg_predictions = logreg_model.predict(X_test)
logreg_accuracy = accuracy_score(y_test, logreg_predictions)

# Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=83)
rf_model.fit(X_train, y_train)
rf_predictions = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_predictions)

# Display the results
print("Logistic Regression Accuracy:", logreg_accuracy)
print("Random Forest Accuracy:", rf_accuracy)

#  Part 3 - the first question :

import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

# Function to plot decision boundaries and areas
def plot_decision_boundary(model, X, y, title):
    h = .02  # Step size in the mesh

    # Create color maps
    cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF'])
    cmap_bold = ListedColormap(['#FF0000', '#0000FF'])

    # Plot the decision boundary
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

    # Plot the training points
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold, edgecolor='k', s=20)
    plt.title(title)

    plt.show()

# Plot decision boundary for Logistic Regression
plot_decision_boundary(logreg_model, X, y, 'Logistic Regression Decision Boundary')

#  Part 3 - the first question :

def plot_decision_boundary(model, X, y, title):
    h = .02  # Step size in the mesh

    # Create color maps
    cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF'])
    cmap_bold = ListedColormap(['#FF0000', '#0000FF'])

    # Plot the decision boundary
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

    # Plot the training points
    correct_predictions = model.predict(X) == y
    incorrect_predictions = ~correct_predictions

    plt.scatter(X[correct_predictions, 0], X[correct_predictions, 1], c=y[correct_predictions], cmap=cmap_bold, marker='o', edgecolor='k', s=20, label='Correct')
    plt.scatter(X[incorrect_predictions, 0], X[incorrect_predictions, 1], marker='*', color='yellow', s=50, label='Misclassified')

    plt.title(title)
    plt.legend()
    plt.show()

# Plot decision boundary for Logistic Regression
plot_decision_boundary(logreg_model, X, y, 'Logistic Regression Decision Boundary')

#  Part 4 - the first question :

# Part 1 - the first question :

from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
import numpy as np

# Generating synthetic dataset
X, y = make_classification(n_samples=1000, n_features=2, n_classes=2, n_clusters_per_class=2, n_redundant=0, random_state=83)

# Plotting the generated dataset
plt.scatter(X[:, 0], X[:, 1] ,c=y)
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Synthetic Dataset with 2 Classes and 2 Features')
plt.show()

#  Part 4 - the first question :

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Generating synthetic dataset
X, y = make_classification(n_samples=1000, n_features=2, n_classes=2, n_clusters_per_class=2, n_redundant=0, random_state=83)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=83)

# Logistic Regression
logreg_model = LogisticRegression(random_state=83)
logreg_model.fit(X_train, y_train)
logreg_predictions = logreg_model.predict(X_test)
logreg_accuracy = accuracy_score(y_test, logreg_predictions)

# Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=83)
rf_model.fit(X_train, y_train)
rf_predictions = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_predictions)

# Display the results
print("Logistic Regression Accuracy:", logreg_accuracy)
print("Random Forest Accuracy:", rf_accuracy)

#  Part 4 - the first question :


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap

# Generating synthetic dataset
X, y = make_classification(n_samples=1000, n_features=2, n_classes=2, n_clusters_per_class=2, n_redundant=0, random_state=83)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=83)

# Training a logistic regression model
logreg_model = LogisticRegression(random_state=83)
logreg_model.fit(X_train, y_train)

# Making predictions on the test set
logreg_predictions = logreg_model.predict(X_test)

# Function to plot decision boundaries and areas
def plot_decision_boundary(model, X, y, title):
    h = .02  # Step size in the mesh

    # Create color maps
    cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF'])
    cmap_bold = ListedColormap(['#FF0000', '#0000FF'])

    # Plot the decision boundary
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

    # Plot the training points
    correct_predictions = model.predict(X) == y
    incorrect_predictions = ~correct_predictions

    plt.scatter(X[correct_predictions, 0], X[correct_predictions, 1], c=y[correct_predictions], cmap=cmap_bold, marker='o', edgecolor='k', s=20, label='Correct')
    plt.scatter(X[incorrect_predictions, 0], X[incorrect_predictions, 1], marker='x', color='black', s=50, label='Misclassified')

    plt.title(title)
    plt.legend()
    plt.show()

# Plot decision boundary for Logistic Regression
plot_decision_boundary(logreg_model, X, y, 'Logistic Regression Decision Boundary')

#  Part 4 - the first question :


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap

# Generating synthetic dataset
X, y = make_classification(n_samples=1000, n_features=2, n_classes=2, n_clusters_per_class=2, n_redundant=0, random_state=83)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=83)

# Training a logistic regression model
logreg_model = LogisticRegression(random_state=83)
logreg_model.fit(X_train, y_train)

# Making predictions on the test set
logreg_predictions = logreg_model.predict(X_test)

# Function to plot decision boundaries and areas
def plot_decision_boundary(model, X, y, title):
    h = .02  # Step size in the mesh

    # Create color maps
    cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF'])
    cmap_bold = ListedColormap(['#FF0000', '#0000FF'])

    # Plot the decision boundary
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

    # Plot the training points
    correct_predictions = model.predict(X) == y
    incorrect_predictions = ~correct_predictions

    plt.scatter(X[correct_predictions, 0], X[correct_predictions, 1], c=y[correct_predictions], cmap=cmap_bold, marker='o', edgecolor='k', s=20, label='Correct')
    plt.scatter(X[incorrect_predictions, 0], X[incorrect_predictions, 1], marker='*', color='yellow', s=50, label='Misclassified')

    plt.title(title)
    plt.legend()
    plt.show()

# Plot decision boundary for Logistic Regression
plot_decision_boundary(logreg_model, X, y, 'Logistic Regression Decision Boundary')

#  Part 5 - the first question :

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap

# Generating synthetic dataset with 3 classes
X, y = make_classification(n_samples=1000, n_features=2, n_classes=3, n_clusters_per_class=1, n_redundant=0, random_state=83)
plt.scatter(X[:, 0], X[:, 1] ,c=y)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=83)

# Training a logistic regression model for multi-class classification
logreg_model = LogisticRegression(multi_class='multinomial', solver='lbfgs', random_state=83)
logreg_model.fit(X_train, y_train)

# Making predictions on the test set
logreg_predictions = logreg_model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, logreg_predictions)
print("Accuracy:", accuracy)

# Function to plot decision boundaries and areas
def plot_decision_boundary(model, X, y, title):
    h = .02  # Step size in the mesh

    # Create color maps
    cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF', '#AAFFAA'])
    cmap_bold = ListedColormap(['#FF0000', '#0000FF', '#00FF00'])

    # Plot the decision boundary
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

    # Plot the training points
    correct_predictions = model.predict(X) == y
    incorrect_predictions = ~correct_predictions

    plt.scatter(X[correct_predictions, 0], X[correct_predictions, 1], c=y[correct_predictions], cmap=cmap_bold, marker='o', edgecolor='k', s=20, label='Correct')
    plt.scatter(X[incorrect_predictions, 0], X[incorrect_predictions, 1], marker='*', color='yellow', s=50, label='Misclassified')

    plt.title(title)
    plt.legend()
    plt.show()

# Plot decision boundary for Logistic Regression
plot_decision_boundary(logreg_model, X, y, 'Logistic Regression Decision Boundary')